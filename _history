{"entries":[{"timestamp":1760880451726,"editorVersion":"8.0.17","changes":[{"type":"edited","filename":"main.blocks","patch":[{"start1":0,"length1":135,"diffs":[[1,"<xml xmlns=\"http://www.w3.org/1999/xhtml\">\n  <block type=\"pxt-on-start\"></block>\n  <block type=\"device_forever\"></block>\n</xml>"]]}]},{"type":"edited","filename":"main.ts","patch":[{"start1":0,"length1":33,"diffs":[[1,"\n"]]}]},{"type":"edited","filename":"pxt.json","patch":[{"start1":211,"length1":58,"diffs":[[1,"        \"README.md\"\n"]]},{"start1":238,"length1":31,"diffs":[[1,"    \"additionalFilePaths\": []\n"]]}]},{"type":"added","filename":"manette_yahboom_joystic.ts","value":"\n/**\n* Utilisez ce fichier pour dÃ©finir des fonctions et des blocs personnalisÃ©s.\n* En savoir plus Ã  https://makecode.microbit.org/blocks/custom\n*/\n\nenum MyEnum {\n    //% block=\"one\"\n    One,\n    //% block=\"two\"\n    Two\n}\n\n/**\n * Custom blocks\n */\n//% weight=200 color=#821071 icon=\"ðŸŽ®\"\nnamespace manette {\n    /**\n     * TODO: describe your function here\n     * @param n describe parameter here, eg: 5\n     * @param s describe parameter here, eg: \"Hello\"\n     * @param e describe parameter here\n     */\n    //% block\n    export function foo(n: number, s: string, e: MyEnum): void {\n        // Add code here\n    }\n\n    /**\n     * TODO: describe your function here\n     * @param value describe value here, eg: 5\n     */\n    //% block\n    export function fib(value: number): number {\n        return value <= 1 ? value : fib(value -1) + fib(value - 2);\n    }\n}\n"}]},{"timestamp":1760881050544,"editorVersion":"8.0.17","changes":[{"type":"edited","filename":"main.blocks","patch":[{"start1":0,"length1":133,"diffs":[[1,"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"device_forever\" x=\"20\" y=\"20\"></block></xml>"]]}]},{"type":"edited","filename":"manette_yahboom_joystic.ts","patch":[{"start1":248,"length1":43,"diffs":[[1,"//% weight=200 color=#821071 icon=\"ðŸŽ®\"\n"]]},{"start1":856,"length1":52,"diffs":[[1,""]]}]}]},{"timestamp":1760881643290,"editorVersion":"8.0.17","changes":[{"type":"edited","filename":"manette_yahboom_joystic.ts","patch":[{"start1":149,"length1":128,"diffs":[[1,"enum MyEnum {\n    //% block=\"one\"\n    One,\n    //% block=\"two\"\n    Two\n"]]},{"start1":902,"length1":150,"diffs":[[1,"    \n"]]}]}]},{"timestamp":1760882228867,"editorVersion":"8.0.17","changes":[{"type":"edited","filename":"pxt.json","patch":[{"start1":276,"length1":35,"diffs":[[1,"    \"preferredEditor\": \"tsprj\"\n"]]}]},{"type":"edited","filename":"manette_yahboom_joystic.ts","patch":[{"start1":368,"length1":0,"diffs":[[1,"    /**\n     * TODO: describe your function here\n     * @param n describe parameter here, eg: 5\n     * @param s describe parameter here, eg: \"Hello\"\n     * @param e describe parameter here\n     */\n    //% block\n    export function foo(n: number, s: string, e: MyEnum): void {\n        // Add code here\n    }\n"]]},{"start1":929,"length1":57,"diffs":[[1,"     * \n"]]},{"start1":945,"length1":45,"diffs":[[1,"    //% block\n"]]},{"start1":1059,"length1":134,"diffs":[[1,"            pins.digitalReadPin()\n"]]},{"start1":1103,"length1":573,"diffs":[[1,""]]}]}]},{"timestamp":1760882825290,"editorVersion":"8.0.17","changes":[{"type":"edited","filename":"main.blocks","patch":[{"start1":0,"length1":1878,"diffs":[[1,"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"device_forever\" x=\"0\" y=\"0\"></block></xml>"]]}]},{"type":"edited","filename":"main.ts","patch":[{"start1":28,"length1":816,"diffs":[[1,"\t\n"]]}]},{"type":"edited","filename":"pxt.json","patch":[{"start1":276,"length1":31,"diffs":[[1,"    \"preferredEditor\": \"blocksprj\"\n"]]}]},{"type":"edited","filename":"manette_yahboom_joystic.ts","patch":[{"start1":687,"length1":39,"diffs":[[1,"    //% block=\"Est-ce que $btn est pressÃ© ?\"\n"]]},{"start1":832,"length1":41,"diffs":[[1,""]]}]}]},{"timestamp":1760883424854,"editorVersion":"8.0.17","changes":[{"type":"edited","filename":"manette_yahboom_joystic.ts","patch":[{"start1":826,"length1":119,"diffs":[[1,"            pins.setPull(DigitalPin.P13)\n            if (pins.digitalReadPin(DigitalPin.P13) == 1)\n"]]},{"start1":1050,"length1":119,"diffs":[[1,"            if (pins.digitalReadPin(DigitalPin.P14) == 1)\n"]]},{"start1":1234,"length1":119,"diffs":[[1,"            if (pins.digitalReadPin(DigitalPin.P15) == 1)\n"]]},{"start1":1418,"length1":119,"diffs":[[1,"            if (pins.digitalReadPin(DigitalPin.P16) == 1)\n"]]},{"start1":1590,"length1":323,"diffs":[[1,""]]},{"start1":1594,"length1":0,"diffs":[[1,"\n"]]}]}]},{"timestamp":1760884019655,"editorVersion":"8.0.17","changes":[{"type":"edited","filename":"main.blocks","patch":[{"start1":0,"length1":716,"diffs":[[1,"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"device_forever\" x=\"0\" y=\"0\"><statement name=\"HANDLER\"><block type=\"controls_if\"><value name=\"IF0\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"manette_is_pressed\"><field name=\"btn\">GamepadButton.B1</field></block></value><statement name=\"DO0\"><block type=\"device_show_leds\"><field name=\"LEDS\">`\n        . . . # . \n        . . # # . \n        . # . # . \n        . . . # . \n        . . . # .\n        `</field></block></statement><next><block type=\"controls_if\"><value name=\"IF0\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"manette_is_pressed\"><field name=\"btn\">GamepadButton.B2</field></block></value><statement name=\"DO0\"><block type=\"device_show_leds\"><field name=\"LEDS\">`\n        . # # # . \n        . . . # . \n        . . # . . \n        . # . . . \n        . # # # .\n        `</field></block></statement><next><block type=\"controls_if\"><value name=\"IF0\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"manette_is_pressed\"><field name=\"btn\">GamepadButton.B3</field></block></value><statement name=\"DO0\"><block type=\"device_show_leds\"><field name=\"LEDS\">`\n        . # # # . \n        . . . # . \n        . . # . . \n        . . . # . \n        . # # # .\n        `</field></block></statement><next><block type=\"controls_if\"><value name=\"IF0\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"manette_is_pressed\"><field name=\"btn\">GamepadButton.B4</field></block></value><statement name=\"DO0\"><block type=\"device_show_leds\"><field name=\"LEDS\">`\n        . # . . . \n        . # . # . \n        . # # # # \n        . . . # . \n        . . . # .\n        `</field></block></statement></block></next></block></next></block></next></block></statement></block></xml>"]]}]},{"type":"edited","filename":"main.ts","patch":[{"start1":28,"length1":114,"diffs":[[1,"    if (manette.is_pressed(GamepadButton.B1)) {\n        basic.showLeds(`\n            . . . # .\n            . . # # .\n            . # . # .\n            . . . # .\n            . . . # .\n            `)\n    }\n    if (manette.is_pressed(GamepadButton.B2)) {\n        basic.showLeds(`\n            . # # # .\n            . . . # .\n            . . # . .\n            . # . . .\n            . # # # .\n            `)\n    }\n    if (manette.is_pressed(GamepadButton.B3)) {\n        basic.showLeds(`\n            . # # # .\n            . . . # .\n            . . # . .\n            . . . # .\n            . # # # .\n            `)\n    }\n    if (manette.is_pressed(GamepadButton.B4)) {\n        basic.showLeds(`\n            . # . . .\n            . # . # .\n            . # # # #\n            . . . # .\n            . . . # .\n            `)\n    }\n"]]}]},{"type":"edited","filename":"pxt.json","patch":[{"start1":276,"length1":35,"diffs":[[1,"    \"preferredEditor\": \"tsprj\"\n"]]}]},{"type":"edited","filename":"manette_yahboom_joystic.ts","patch":[{"start1":377,"length1":0,"diffs":[[1,"     * TODO: describe your function here\n     * @param value describe value here, eg: 5\n     */\n    //% block\n    export function fib(value: number): number {\n        return value <= 1 ? value : fib(value -1) + fib(value - 2);\n    }\n\n\n\n\n    /**\n"]]},{"start1":1935,"length1":109,"diffs":[[1,"        pins.setPull(DigitalPin.P13, PinPullMode.PullUp)\n        if (pins.digitalReadPin(DigitalPin.P13) == 0)\n"]]}]}]},{"timestamp":1760884506787,"editorVersion":"8.0.17","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":121,"length1":30,"diffs":[[1,""]]}]}]},{"timestamp":1760886652491,"editorVersion":"8.0.17","changes":[{"type":"edited","filename":"main.blocks","patch":[{"start1":0,"length1":944,"diffs":[[1,"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"device_forever\" x=\"73\" y=\"104\"><statement name=\"HANDLER\"><block type=\"serial_redirect_to_usb\"><next><block type=\"serial_writenumber\"><value name=\"value\"><shadow type=\"math_number\" disabled-reasons=\"pxt_automatic_disabled\"><field name=\"NUM\">0</field></shadow><block type=\"device_get_analog_pin\"><value name=\"name\"><shadow type=\"analog_read_write_pin_shadow\"><field name=\"pin\">AnalogReadWritePin.P1</field></shadow></value></block></value><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">100</field></shadow></value></block></next></block></next></block></statement></block></xml>"]]}]}]},{"timestamp":1760886652502,"editorVersion":"8.0.17","changes":[{"type":"edited","filename":"main.blocks","patch":[{"start1":0,"length1":832,"diffs":[[1,"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"device_forever\" x=\"73\" y=\"104\"><statement name=\"HANDLER\"><block type=\"serial_redirect_to_usb\"><next><block type=\"serial_writenumber\"><value name=\"value\"><shadow type=\"math_number\" disabled-reasons=\"pxt_automatic_disabled\"><field name=\"NUM\">0</field></shadow><block type=\"device_get_analog_pin\"><value name=\"name\"><shadow type=\"analog_read_write_pin_shadow\"><field name=\"pin\">AnalogReadWritePin.P1</field></shadow></value></block></value><next><block type=\"serial_writevalue\"><value name=\"name\"><shadow type=\"text\"><field name=\"TEXT\">x</field></shadow></value><value name=\"value\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow></value><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">100</field></shadow></value></block></next></block></next></block></next></block></statement></block></xml>"]]}]},{"type":"edited","filename":"main.ts","patch":[{"start1":55,"length1":70,"diffs":[[1,"    serial.writeNumber(pins.analogReadPin(AnalogReadWritePin.P1))\n    serial.writeValue(\"x\", 0)\n"]]}]},{"type":"edited","filename":"pxt.json","patch":[{"start1":276,"length1":31,"diffs":[[1,"    \"preferredEditor\": \"blocksprj\"\n"]]}]},{"type":"edited","filename":"manette_yahboom_joystic.ts","patch":[{"start1":1596,"length1":42,"diffs":[[1,"    //% block=\"bonton joystic est pressÃ©\"\n"]]}]}]},{"timestamp":1760887008676,"editorVersion":"8.0.17","changes":[{"type":"edited","filename":"main.blocks","patch":[{"start1":0,"length1":694,"diffs":[[1,"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"device_forever\" x=\"0\" y=\"0\"><statement name=\"HANDLER\"><block type=\"serial_redirect_to_usb\"><next><block type=\"serial_writevalue\"><value name=\"name\"><shadow type=\"text\"><field name=\"TEXT\">x</field></shadow></value><value name=\"value\"><block type=\"device_get_analog_pin\"><value name=\"name\"><shadow type=\"analog_read_write_pin_shadow\"><field name=\"pin\">AnalogReadWritePin.P1</field></shadow></value></block></value><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">100</field></shadow></value></block></next></block></next></block></statement></block><block type=\"manette_is_pressed\" disabled-reasons=\"pxt_automatic_disabled\" x=\"420\" y=\"260\"><field name=\"btn\">GamepadButton.B1</field></block></xml>"]]}]}]},{"timestamp":1760888182527,"editorVersion":"8.0.17","changes":[{"type":"edited","filename":"pxt.json","patch":[{"start1":276,"length1":35,"diffs":[[1,"    \"preferredEditor\": \"tsprj\"\n"]]}]}]},{"timestamp":1760888182627,"editorVersion":"8.0.17","changes":[{"type":"edited","filename":"main.blocks","patch":[{"start1":0,"length1":691,"diffs":[[1,"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"device_forever\" x=\"73\" y=\"104\"><statement name=\"HANDLER\"><block type=\"serial_redirect_to_usb\"><next><block type=\"serial_writevalue\"><value name=\"name\"><shadow type=\"text\"><field name=\"TEXT\">x</field></shadow></value><value name=\"value\"><block type=\"device_get_analog_pin\"><value name=\"name\"><shadow type=\"analog_read_write_pin_shadow\"><field name=\"pin\">AnalogReadWritePin.P1</field></shadow></value></block></value><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">100</field></shadow></value></block></next></block></next></block></statement></block></xml>"]]}]},{"type":"edited","filename":"pxt.json","patch":[{"start1":276,"length1":31,"diffs":[[1,"    \"preferredEditor\": \"blocksprj\"\n"]]}]},{"type":"edited","filename":"manette_yahboom_joystic.ts","patch":[{"start1":145,"length1":6,"diffs":[[1,"*/\n\n"]]},{"start1":280,"length1":72,"diffs":[[1,""]]},{"start1":1869,"length1":141,"diffs":[[1,""]]},{"start1":1870,"length1":0,"diffs":[[1,"\n\n\n"]]}]}]},{"timestamp":1760888780085,"editorVersion":"8.0.17","changes":[{"type":"edited","filename":"manette_yahboom_joystic.ts","patch":[{"start1":2028,"length1":258,"diffs":[[1,"    export function get_axis_value(ax :Gamepadaxis) : n\n"]]}]}]},{"timestamp":1760889305864,"editorVersion":"8.0.17","changes":[{"type":"edited","filename":"main.blocks","patch":[{"start1":0,"length1":603,"diffs":[[1,"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"device_forever\" x=\"0\" y=\"0\"><statement name=\"HANDLER\"><block type=\"serial_redirect_to_usb\"><next><block type=\"serial_writevalue\"><value name=\"name\"><shadow type=\"text\"><field name=\"TEXT\">x</field></shadow></value><value name=\"value\"><block type=\"device_get_analog_pin\"><value name=\"name\"><shadow type=\"analog_read_write_pin_shadow\"><field name=\"pin\">AnalogReadWritePin.P1</field></shadow></value></block></value><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">100</field></shadow></value></block></next></block></next></block></statement></block></xml>"]]}]},{"type":"edited","filename":"main.ts","patch":[{"start1":55,"length1":66,"diffs":[[1,"    serial.writeValue(\"x\", pins.analogReadPin(AnalogReadWritePin.P1))\n"]]}]},{"type":"edited","filename":"pxt.json","patch":[{"start1":276,"length1":35,"diffs":[[1,"    \"preferredEditor\": \"tsprj\"\n"]]}]},{"type":"edited","filename":"manette_yahboom_joystic.ts","patch":[{"start1":1986,"length1":48,"diffs":[[1,"    //% block=\"bouton joystic est pressÃ©\"\n"]]},{"start1":2147,"length1":62,"diffs":[[1,"        pins.analogReadPin(AnalogReadWritePin.P1)\n"]]},{"start1":2230,"length1":105,"diffs":[[1,"        pins.analogReadPin(AnalogReadWritePin.P2)\n"]]}]}]},{"timestamp":1760889903486,"editorVersion":"8.0.17","changes":[{"type":"edited","filename":"main.blocks","patch":[{"start1":0,"length1":851,"diffs":[[1,"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"device_forever\" x=\"0\" y=\"0\"><statement name=\"HANDLER\"><block type=\"serial_redirect_to_usb\"><next><block type=\"serial_writevalue\"><value name=\"name\"><shadow type=\"text\"><field name=\"TEXT\">x</field></shadow></value><value name=\"value\"><block type=\"manette_get_axis_value\"><field name=\"ax\">Gamepadaxis.x</field></block></value><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">100</field></shadow></value></block></next></block></next></block></statement></block></xml>"]]}]},{"type":"edited","filename":"main.ts","patch":[{"start1":121,"length1":66,"diffs":[[1,""]]}]}]},{"timestamp":1760890058417,"editorVersion":"8.0.17","changes":[{"type":"edited","filename":"pxt.json","patch":[{"start1":276,"length1":31,"diffs":[[1,"    \"preferredEditor\": \"blocksprj\"\n"]]}]}]},{"timestamp":1760891397517,"editorVersion":"8.0.17","changes":[{"type":"edited","filename":"manette_yahboom_joystic.ts","patch":[{"start1":1951,"length1":23,"diffs":[[1,"           * Joystic\n           */\n"]]}]}]},{"timestamp":1760891466447,"editorVersion":"8.0.17","changes":[{"type":"edited","filename":"manette_yahboom_joystic.ts","patch":[{"start1":2348,"length1":152,"diffs":[[1,""]]}]}]},{"timestamp":1760891481822,"editorVersion":"8.0.17","changes":[{"type":"edited","filename":"manette_yahboom_joystic.ts","patch":[{"start1":2437,"length1":50,"diffs":[[1,"    export function get_axis_value(ax: Gamepadaxis): number {\n"]]}]}]},{"timestamp":1760892458725,"editorVersion":"8.0.17","changes":[{"type":"edited","filename":"manette_yahboom_joystic.ts","patch":[{"start1":2437,"length1":51,"diffs":[[1,"    export function on(ax: Gamepadaxis): number {\n"]]}]}]},{"timestamp":1760892459279,"editorVersion":"8.0.17","changes":[{"type":"edited","filename":"main.blocks","patch":[{"start1":0,"length1":1776,"diffs":[[1,"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"device_forever\" x=\"0\" y=\"0\"><statement name=\"HANDLER\"><block type=\"serial_redirect_to_usb\"><next><block type=\"serial_writevalue\"><value name=\"name\"><shadow type=\"text\"><field name=\"TEXT\">x</field></shadow></value><value name=\"value\"><block type=\"manette_get_axis_value\"><field name=\"ax\">Gamepadaxis.x</field></block></value><next><block type=\"serial_writevalue\"><value name=\"name\"><shadow type=\"text\"><field name=\"TEXT\">y</field></shadow></value><value name=\"value\"><block type=\"manette_get_axis_value\"><field name=\"ax\">Gamepadaxis.y</field></block></value><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">100</field></shadow></value></block></next></block></next></block></next></block></statement></block></xml>"]]}]},{"type":"edited","filename":"main.ts","patch":[{"start1":0,"length1":97,"diffs":[[1,""]]},{"start1":28,"length1":122,"diffs":[[1,"    serial.redirectToUSB()\n    serial.writeValue(\"x\", manette.get_axis_value(Gamepadaxis.x))\n    serial.writeValue(\"y\", manette.get_axis_value(Gamepadaxis.y))\n"]]}]},{"type":"edited","filename":"manette_yahboom_joystic.ts","patch":[{"start1":2381,"length1":39,"diffs":[[1,""]]},{"start1":2389,"length1":444,"diffs":[[1,"    //% block=\"position de l'ax $ax du joystic\"\n    export function on_(ax: Gamepadaxis): number {\n"]]},{"start1":2489,"length1":492,"diffs":[[1,""]]}]}]},{"timestamp":1760893052551,"editorVersion":"8.0.17","changes":[{"type":"edited","filename":"main.blocks","patch":[{"start1":0,"length1":1272,"diffs":[[1,"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"device_forever\" x=\"55\" y=\"9\"><statement name=\"HANDLER\"><block type=\"device_show_leds\"><field name=\"LEDS\">`\n"]]},{"start1":292,"length1":688,"diffs":[[1,"        `</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">100</field></shadow></value></block></next></block></statement></block><block type=\"serial_redirect_to_usb\" disabled-reasons=\"pxt_automatic_disabled\" x=\"419\" y=\"83\"><next><block type=\"serial_writevalue\" disabled-reasons=\"pxt_automatic_disabled\"><value name=\"name\"><shadow type=\"text\" disabled-reasons=\"pxt_automatic_disabled\"><field name=\"TEXT\">x</field></shadow></value><value name=\"value\"><block type=\"manette_get_axis_value\" disabled-reasons=\"pxt_automatic_disabled\"><field name=\"ax\">Gamepadaxis.x</field></block></value><next><block type=\"serial_writevalue\" disabled-reasons=\"pxt_automatic_disabled\"><value name=\"name\"><shadow type=\"text\" disabled-reasons=\"pxt_automatic_disabled\"><field name=\"TEXT\">y</field></shadow></value><value name=\"value\"><block type=\"manette_get_axis_value\" disabled-reasons=\"pxt_automatic_disabled\"><field name=\"ax\">Gamepadaxis.y</field></block></value><next><block type=\"device_pause\" disabled-reasons=\"pxt_automatic_disabled\"><value name=\"pause\"><shadow type=\"timePicker\" disabled-reasons=\"pxt_automatic_disabled\"><field name=\"ms\">100</field></shadow></value></block></next></block></next></block></next></block><block type=\"manette_on_button_pressed\" x=\"452\" y=\"398\"><field name=\"btn\">GamepadButton.B1</field><statement name=\"HANDLER\"><block type=\"basic_show_icon\"><field name=\"i\">IconNames.Heart</field></block></statement></block></xml>"]]}]},{"type":"edited","filename":"main.ts","patch":[{"start1":0,"length1":51,"diffs":[[1,""]]},{"start1":97,"length1":85,"diffs":[[1,""]]}]},{"type":"edited","filename":"manette_yahboom_joystic.ts","patch":[{"start1":3084,"length1":45,"diffs":[[1,"            let prev = is_pressed(btn);\n"]]},{"start1":3151,"length1":48,"diffs":[[1,"                let val = is_pressed(btn);\n"]]}]}]},{"timestamp":1760893558525,"editorVersion":"8.0.17","changes":[{"type":"edited","filename":"main.blocks","patch":[{"start1":0,"length1":84,"diffs":[[1,"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"serial_redirect_to_usb\" disabled-reasons=\"pxt_automatic_disabled\" x=\"313\" y=\"17\"><next><block type=\"serial_writevalue\" disabled-reasons=\"pxt_automatic_disabled\"><value name=\"name\"><shadow type=\"text\" disabled-reasons=\"pxt_automatic_disabled\"><field name=\"TEXT\">x</field></shadow></value><value name=\"value\"><block type=\"manette_get_axis_value\" disabled-reasons=\"pxt_automatic_disabled\"><field name=\"ax\">Gamepadaxis.x</field></block></value><next><block type=\"serial_writevalue\" disabled-reasons=\"pxt_automatic_disabled\"><value name=\"name\"><shadow type=\"text\" disabled-reasons=\"pxt_automatic_disabled\"><field name=\"TEXT\">y</field></shadow></value><value name=\"value\"><block type=\"manette_get_axis_value\" disabled-reasons=\"pxt_automatic_disabled\"><field name=\"ax\">Gamepadaxis.y</field></block></value><next><block type=\"device_pause\" disabled-reasons=\"pxt_automatic_disabled\"><value name=\"pause\"><shadow type=\"timePicker\" disabled-reasons=\"pxt_automatic_disabled\"><field name=\"ms\">100</field></shadow></value></block></next></block></next></block></next></block><block type=\"device_forever\" x=\"54\" y=\"51\"><statement name=\"HANDLER\"><block type=\"device_show_leds\"><field name=\"LEDS\">`\n        . . . . . \n        . . . . . \n        . . . . . \n        . . . . . \n        . . . . .\n        `</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">100</field></shadow></value></block></next></block></statement></block><block type=\"manette_on_button_pressed\" x=\"419\" y=\"314\"><field name=\"btn\">GamepadButton.B1</field><statement name=\"HANDLER\"><block type=\"basic_show_icon\"><field name=\"i\">IconNames.Heart</field></block></statement></block><block type=\"device_button_event\" x=\"50\" y=\"485\"><field name=\"NAME\">Button.A</field></block><block type=\"manette_on_joystic_button_pressed\" x=\"417\" y=\"531\"><statement name=\"HANDLER\"><block type=\"basic_show_icon\"><field name=\"i\">IconNames.Yes</field></block></statement></block></xml>"]]}]},{"type":"edited","filename":"main.ts","patch":[{"start1":0,"length1":1,"diffs":[[1,"input.onButtonPressed(Button.A, function () {\n\t\n})\nmanette.on_button_pressed(GamepadButton.B1, function () {\n    basic.showIcon(IconNames.Heart)\n})\nmanette.on_joystic_button_pressed(function () {\n    basic.showIcon(IconNames.Yes)\n})\nbasic.forever(function () {\n    basic.showLeds(`\n        . . . . .\n        . . . . .\n        . . . . .\n        . . . . .\n        . . . . .\n        `)\n    basic.pause(100)\n})\n"]]}]},{"type":"edited","filename":"pxt.json","patch":[{"start1":276,"length1":79,"diffs":[[1,"    \"preferredEditor\": \"tsprj\"\n"]]}]},{"type":"edited","filename":"manette_yahboom_joystic.ts","patch":[{"start1":2701,"length1":36,"diffs":[[1,"                if (val && !prev) {\n"]]},{"start1":3204,"length1":36,"diffs":[[1,"                if (val && !prev) {\n"]]}]},{"type":"added","filename":"test.ts","value":"// les tests vont ici ; cela ne sera pas compilÃ© si ce paquet est utilisÃ© en tant qu'extension.\n"}]}],"snapshots":[{"timestamp":1760880451725,"editorVersion":"8.0.17","text":{"main.blocks":"<xml xmlns=\"http://www.w3.org/1999/xhtml\">\n  <block type=\"pxt-on-start\"></block>\n  <block type=\"device_forever\"></block>\n</xml>","main.ts":"\n","README.md":"","pxt.json":"{\n    \"name\": \"manette joystic\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\"\n    ],\n    \"additionalFilePaths\": []\n}\n"}},{"timestamp":1760882256761,"editorVersion":"8.0.17","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"device_forever\" x=\"0\" y=\"0\"></block></xml>","main.ts":"basic.forever(function () {\n\t\n})\n","README.md":"","manette_yahboom_joystic.ts":"\n/**\n* Utilisez ce fichier pour dÃ©finir des fonctions et des blocs personnalisÃ©s.\n* En savoir plus Ã  https://makecode.microbit.org/blocks/custom\n*/\n\nenum GamepadButton {\n    //% block=\"B1\"\n    B1,\n    //% block=\"B2\"\n    B2,\n    //% block=\"B3\"\n    B3,\n    //% block=\"B4\"\n    B4\n}\n\n/**\n * Custom blocks\n */\n//% weight=105 color=#821071 icon=\"\\uf11b\"\nnamespace manette {\n    /**\n     * TODO: describe your function here\n     * @param n describe parameter here, eg: 5\n     * @param s describe parameter here, eg: \"Hello\"\n     * @param e describe parameter here\n     */\n    //% block\n    export function foo(n: number, s: string, e: MyEnum): void {\n        // Add code here\n    }\n\n    /**\n     * TODO: describe your function here\n     * @param value describe value here, eg: 5\n     */\n    //% block\n    export function fib(value: number): number {\n        return value <= 1 ? value : fib(value -1) + fib(value - 2);\n    }\n\n\n\n\n    /**\n     * \n     */\n    //% block\n    export function is_pressed(btn: GamepadButton):boolean {\n        if (btn == GamepadButton.B1) {\n            pins.digitalReadPin(DigitalPin.)\n        }\n    }\n\n\n\n\n\n}\n","pxt.json":"{\n    \"name\": \"manette joystic\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\",\n        \"manette_yahboom_joystic.ts\"\n    ],\n    \"preferredEditor\": \"tsprj\"\n}\n"}},{"timestamp":1760884070116,"editorVersion":"8.0.17","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables></xml>","main.ts":"\n","README.md":"","manette_yahboom_joystic.ts":"\n/**\n* Utilisez ce fichier pour dÃ©finir des fonctions et des blocs personnalisÃ©s.\n* En savoir plus Ã  https://makecode.microbit.org/blocks/custom\n*/\n\nenum GamepadButton {\n    //% block=\"B1\"\n    B1,\n    //% block=\"B2\"\n    B2,\n    //% block=\"B3\"\n    B3,\n    //% block=\"B4\"\n    B4\n}\n\n/**\n * Custom blocks\n */\n//% weight=105 color=#821071 icon=\"\\uf11b\"\nnamespace manette {\n\n    /**\n     * TODO: describe your function here\n     * @param value describe value here, eg: 5\n     */\n    //% block\n    export function fib(value: number): number {\n        return value <= 1 ? value : fib(value -1) + fib(value - 2);\n    }\n\n\n\n\n    /**\n     * Est pressÃ©\n     * @param btn Bouton de la manette\n     */\n    //% block=\"bouton $btn est pressÃ©\"\n    export function is_pressed(btn: GamepadButton):boolean {\n        if (btn == GamepadButton.B1) {\n            pins.setPull(DigitalPin.P13, PinPullMode.PullUp)\n            if (pins.digitalReadPin(DigitalPin.P13) == 0)\n                return true;\n            else\n                return false;\n        }\n        if (btn == GamepadButton.B2) {\n            pins.setPull(DigitalPin.P14, PinPullMode.PullUp)\n            if (pins.digitalReadPin(DigitalPin.P14) == 0)\n                return true;\n            else\n                return false;\n        } \n        if (btn == GamepadButton.B3) {\n            pins.setPull(DigitalPin.P15, PinPullMode.PullUp)\n            if (pins.digitalReadPin(DigitalPin.P15) == 0)\n                return true;\n            else\n                return false;\n        } \n        if (btn == GamepadButton.B4) {\n            pins.setPull(DigitalPin.P16, PinPullMode.PullUp)\n            if (pins.digitalReadPin(DigitalPin.P16) == 0)\n                return true;\n            else\n                return false;\n        }\n        return false;\n    }\n    /**\n        * Joystic est pressÃ©\n        */\n    //% block=\"bonton joystic est pressÃ©\"\n    export function joystic_is_pressed(): boolean {\n        pins.setPull(DigitalPin.P8, PinPullMode.PullUp)\n        if (pins.digitalReadPin(DigitalPin.P8) == 0)\n            return true;\n        else\n            return false;\n    }\n\n\n\n\n}\n","pxt.json":"{\n    \"name\": \"manette joystic\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\",\n        \"manette_yahboom_joystic.ts\"\n    ],\n    \"preferredEditor\": \"tsprj\"\n}\n"}},{"timestamp":1760886652491,"editorVersion":"8.0.17","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"device_forever\" x=\"73\" y=\"104\"><statement name=\"HANDLER\"><block type=\"serial_redirect_to_usb\"><next><block type=\"serial_writenumber\"><value name=\"value\"><shadow type=\"math_number\" disabled-reasons=\"pxt_automatic_disabled\"><field name=\"NUM\">0</field></shadow><block type=\"device_get_analog_pin\"><value name=\"name\"><shadow type=\"analog_read_write_pin_shadow\"><field name=\"pin\">AnalogReadWritePin.P1</field></shadow></value></block></value><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">100</field></shadow></value></block></next></block></next></block></statement></block></xml>","main.ts":"","README.md":"","manette_yahboom_joystic.ts":"\n/**\n* Utilisez ce fichier pour dÃ©finir des fonctions et des blocs personnalisÃ©s.\n* En savoir plus Ã  https://makecode.microbit.org/blocks/custom\n*/\n\nenum GamepadButton {\n    //% block=\"B1\"\n    B1,\n    //% block=\"B2\"\n    B2,\n    //% block=\"B3\"\n    B3,\n    //% block=\"B4\"\n    B4\n}\n\n/**\n * Custom blocks\n */\n//% weight=105 color=#821071 icon=\"\\uf11b\"\nnamespace manette {\n\n    /**\n     * Est pressÃ©\n     * @param btn Bouton de la manette\n     */\n    //% block=\"bouton $btn est pressÃ©\"\n    export function is_pressed(btn: GamepadButton):boolean {\n        if (btn == GamepadButton.B1) {\n            pins.setPull(DigitalPin.P13, PinPullMode.PullUp)\n            if (pins.digitalReadPin(DigitalPin.P13) == 0)\n                return true;\n            else\n                return false;\n        }\n        if (btn == GamepadButton.B2) {\n            pins.setPull(DigitalPin.P14, PinPullMode.PullUp)\n            if (pins.digitalReadPin(DigitalPin.P14) == 0)\n                return true;\n            else\n                return false;\n        } \n        if (btn == GamepadButton.B3) {\n            pins.setPull(DigitalPin.P15, PinPullMode.PullUp)\n            if (pins.digitalReadPin(DigitalPin.P15) == 0)\n                return true;\n            else\n                return false;\n        } \n        if (btn == GamepadButton.B4) {\n            pins.setPull(DigitalPin.P16, PinPullMode.PullUp)\n            if (pins.digitalReadPin(DigitalPin.P16) == 0)\n                return true;\n            else\n                return false;\n        }\n        return false;\n    }\n    /**\n        * Joystic est pressÃ©\n        */\n    //% block=\"bonton joystic est pressÃ©\"\n    export function joystic_is_pressed(): boolean {\n        pins.setPull(DigitalPin.P8, PinPullMode.PullUp)\n        if (pins.digitalReadPin(DigitalPin.P8) == 0)\n            return true;\n        else\n            return false;\n    }\n\n\n\n\n}\n","pxt.json":"{\n    \"name\": \"manette joystic\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\",\n        \"manette_yahboom_joystic.ts\"\n    ],\n    \"preferredEditor\": \"blocksprj\"\n}\n"}},{"timestamp":1760888457529,"editorVersion":"8.0.17","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"device_forever\" x=\"0\" y=\"0\"><statement name=\"HANDLER\"><block type=\"serial_redirect_to_usb\"><next><block type=\"serial_writevalue\"><value name=\"name\"><shadow type=\"text\"><field name=\"TEXT\">x</field></shadow></value><value name=\"value\"><block type=\"device_get_analog_pin\"><value name=\"name\"><shadow type=\"analog_read_write_pin_shadow\"><field name=\"pin\">AnalogReadWritePin.P1</field></shadow></value></block></value><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">100</field></shadow></value></block></next></block></next></block></statement></block></xml>","main.ts":"basic.forever(function () {\n    serial.redirectToUSB()\n    serial.writeValue(\"x\", pins.analogReadPin(AnalogReadWritePin.P1))\n    basic.pause(100)\n})\n","README.md":"","manette_yahboom_joystic.ts":"\n/**\n* Utilisez ce fichier pour dÃ©finir des fonctions et des blocs personnalisÃ©s.\n* En savoir plus Ã  https://makecode.microbit.org/blocks/custom\n*/\n    enum GamepadButton {\n        //% block=\"B1\"\nenum GamepadButton {\n    //% block=\"B1\"\n    B1,\n    //% block=\"B2\"\n    B2,\n    //% block=\"B3\"\n    B3,\n    //% block=\"B4\"\n    B4\n}\n\n/**\n * Custom blocks\n */\n//% weight=105 color=#821071 icon=\"\\uf11b\"\nnamespace manette {\n\n    /**\n     * Est pressÃ©\n     * @param btn Bouton de la manette\n     */\n    //% block=\"bouton $btn est pressÃ©\"\n    export function is_pressed(btn: GamepadButton):boolean {\n        if (btn == GamepadButton.B1) {\n            pins.setPull(DigitalPin.P13, PinPullMode.PullUp)\n            if (pins.digitalReadPin(DigitalPin.P13) == 0)\n                return true;\n            else\n                return false;\n        }\n        if (btn == GamepadButton.B2) {\n            pins.setPull(DigitalPin.P14, PinPullMode.PullUp)\n            if (pins.digitalReadPin(DigitalPin.P14) == 0)\n                return true;\n            else\n                return false;\n        } \n        if (btn == GamepadButton.B3) {\n            pins.setPull(DigitalPin.P15, PinPullMode.PullUp)\n            if (pins.digitalReadPin(DigitalPin.P15) == 0)\n                return true;\n            else\n                return false;\n        } \n        if (btn == GamepadButton.B4) {\n            pins.setPull(DigitalPin.P16, PinPullMode.PullUp)\n            if (pins.digitalReadPin(DigitalPin.P16) == 0)\n                return true;\n            else\n                return false;\n        }\n        return false;\n    }\n    /**\n        * Joystic est pressÃ©\n        */\n    //% block=\"bouton joystic est pressÃ©\"\n    export function joystic_is_pressed(): boolean {\n        pins.setPull(DigitalPin.P8, PinPullMode.PullUp)\n        if (pins.digitalReadPin(DigitalPin.P8) == 0)\n            return true;\n        else\n            return false;\n    }\n    /**\n           * Joystic\n           */\n\n\n\n}\n","pxt.json":"{\n    \"name\": \"manette joystic\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\",\n        \"manette_yahboom_joystic.ts\"\n    ],\n    \"preferredEditor\": \"tsprj\"\n}\n"}},{"timestamp":1760891397517,"editorVersion":"8.0.17","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"device_forever\" x=\"0\" y=\"0\"><statement name=\"HANDLER\"><block type=\"serial_redirect_to_usb\"><next><block type=\"serial_writevalue\"><value name=\"name\"><shadow type=\"text\"><field name=\"TEXT\">x</field></shadow></value><value name=\"value\"><block type=\"manette_get_axis_value\"><field name=\"ax\">Gamepadaxis.x</field></block></value><next><block type=\"serial_writevalue\"><value name=\"name\"><shadow type=\"text\"><field name=\"TEXT\">y</field></shadow></value><value name=\"value\"><block type=\"manette_get_axis_value\"><field name=\"ax\">Gamepadaxis.y</field></block></value><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">100</field></shadow></value></block></next></block></next></block></next></block></statement></block></xml>","main.ts":"","README.md":"","manette_yahboom_joystic.ts":"\n/**\n* Utilisez ce fichier pour dÃ©finir des fonctions et des blocs personnalisÃ©s.\n* En savoir plus Ã  https://makecode.microbit.org/blocks/custom\n*/   \nenum GamepadButton {\n    //% block=\"B1\"\n    B1,\n    //% block=\"B2\"\n    B2,\n    //% block=\"B3\"\n    B3,\n    //% block=\"B4\"\n    B4\n}\n\nenum Gamepadaxis {\n    //% block=\"x\"\n    x,\n    //% block=\"y\"\n    y,\n}\n\n/**\n * Custom blocks\n */\n//% weight=105 color=#821071 icon=\"\\uf11b\"\nnamespace manette {\n\n    /**\n     * Est pressÃ©\n     * @param btn Bouton de la manette\n     */\n    //% block=\"bouton $btn est pressÃ©\"\n    export function is_pressed(btn: GamepadButton):boolean {\n        if (btn == GamepadButton.B1) {\n            pins.setPull(DigitalPin.P13, PinPullMode.PullUp)\n            if (pins.digitalReadPin(DigitalPin.P13) == 0)\n                return true;\n            else\n                return false;\n        }\n        if (btn == GamepadButton.B2) {\n            pins.setPull(DigitalPin.P14, PinPullMode.PullUp)\n            if (pins.digitalReadPin(DigitalPin.P14) == 0)\n                return true;\n            else\n                return false;\n        } \n        if (btn == GamepadButton.B3) {\n            pins.setPull(DigitalPin.P15, PinPullMode.PullUp)\n            if (pins.digitalReadPin(DigitalPin.P15) == 0)\n                return true;\n            else\n                return false;\n        } \n        if (btn == GamepadButton.B4) {\n            pins.setPull(DigitalPin.P16, PinPullMode.PullUp)\n            if (pins.digitalReadPin(DigitalPin.P16) == 0)\n                return true;\n            else\n                return false;\n        }\n        return false;\n    }\n    /**\n        * Joystic est pressÃ©\n        */\n    //% block=\"bouton joystic est pressÃ©\"\n    export function joystic_is_pressed(): boolean {\n        pins.setPull(DigitalPin.P8, PinPullMode.PullUp)\n        if (pins.digitalReadPin(DigitalPin.P8) == 0)\n            return true;\n        else\n            return false;\n    }\n    /**\n           * Joystic\n           */\n    //% block=\"position de l'ax $ax du joystic\"\n    export function get_axis_value(ax :Gamepadaxis) : number {\n        let value = 0;\n        if (ax == Gamepadaxis.y)\n            value = pins.analogReadPin(AnalogReadWritePin.P1)\n        if (ax == Gamepadaxis.x)\n            value = pins.analogReadPin(AnalogReadWritePin.P2)\n        return (((value-512)*100)/512)*-1;\n    }\n\n}\n","pxt.json":"{\n    \"name\": \"manette joystic\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\",\n        \"manette_yahboom_joystic.ts\"\n    ],\n    \"preferredEditor\": \"blocksprj\"\n}\n"}},{"timestamp":1760893242532,"editorVersion":"8.0.17","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"device_forever\" x=\"51\" y=\"57\"><statement name=\"HANDLER\"><block type=\"device_show_leds\"><field name=\"LEDS\">`\n        . . . . . \n        . . . . . \n        . . . . . \n        . . . . . \n        . . . . .\n        `</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">100</field></shadow></value></block></next></block></statement></block><block type=\"serial_redirect_to_usb\" disabled-reasons=\"pxt_automatic_disabled\" x=\"364\" y=\"74\"><next><block type=\"serial_writevalue\" disabled-reasons=\"pxt_automatic_disabled\"><value name=\"name\"><shadow type=\"text\" disabled-reasons=\"pxt_automatic_disabled\"><field name=\"TEXT\">x</field></shadow></value><value name=\"value\"><block type=\"manette_get_axis_value\" disabled-reasons=\"pxt_automatic_disabled\"><field name=\"ax\">Gamepadaxis.x</field></block></value><next><block type=\"serial_writevalue\" disabled-reasons=\"pxt_automatic_disabled\"><value name=\"name\"><shadow type=\"text\" disabled-reasons=\"pxt_automatic_disabled\"><field name=\"TEXT\">y</field></shadow></value><value name=\"value\"><block type=\"manette_get_axis_value\" disabled-reasons=\"pxt_automatic_disabled\"><field name=\"ax\">Gamepadaxis.y</field></block></value><next><block type=\"device_pause\" disabled-reasons=\"pxt_automatic_disabled\"><value name=\"pause\"><shadow type=\"timePicker\" disabled-reasons=\"pxt_automatic_disabled\"><field name=\"ms\">100</field></shadow></value></block></next></block></next></block></next></block><block type=\"manette_on_button_pressed\" x=\"470\" y=\"371\"><field name=\"btn\">GamepadButton.B1</field><statement name=\"HANDLER\"><block type=\"basic_show_icon\"><field name=\"i\">IconNames.Heart</field></block></statement></block><block type=\"manette_on_joystic_button_pressed\" x=\"468\" y=\"588\"><statement name=\"HANDLER\"><block type=\"basic_show_icon\"><field name=\"i\">IconNames.Yes</field></block></statement></block></xml>","main.ts":"","README.md":"","manette_yahboom_joystic.ts":"\n/**\n* Utilisez ce fichier pour dÃ©finir des fonctions et des blocs personnalisÃ©s.\n* En savoir plus Ã  https://makecode.microbit.org/blocks/custom\n*/   \nenum GamepadButton {\n    //% block=\"B1\"\n    B1,\n    //% block=\"B2\"\n    B2,\n    //% block=\"B3\"\n    B3,\n    //% block=\"B4\"\n    B4\n}\n\nenum Gamepadaxis {\n    //% block=\"x\"\n    x,\n    //% block=\"y\"\n    y,\n}\n\n/**\n * Custom blocks\n */\n//% weight=105 color=#821071 icon=\"\\uf11b\"\nnamespace manette {\n\n    /**\n     * Est pressÃ©\n     * @param btn Bouton de la manette\n     */\n    //% block=\"bouton $btn est pressÃ©\"\n    export function is_pressed(btn: GamepadButton):boolean {\n        if (btn == GamepadButton.B1) {\n            pins.setPull(DigitalPin.P13, PinPullMode.PullUp)\n            if (pins.digitalReadPin(DigitalPin.P13) == 0)\n                return true;\n            else\n                return false;\n        }\n        if (btn == GamepadButton.B2) {\n            pins.setPull(DigitalPin.P14, PinPullMode.PullUp)\n            if (pins.digitalReadPin(DigitalPin.P14) == 0)\n                return true;\n            else\n                return false;\n        } \n        if (btn == GamepadButton.B3) {\n            pins.setPull(DigitalPin.P15, PinPullMode.PullUp)\n            if (pins.digitalReadPin(DigitalPin.P15) == 0)\n                return true;\n            else\n                return false;\n        } \n        if (btn == GamepadButton.B4) {\n            pins.setPull(DigitalPin.P16, PinPullMode.PullUp)\n            if (pins.digitalReadPin(DigitalPin.P16) == 0)\n                return true;\n            else\n                return false;\n        }\n        return false;\n    }\n    /**\n        * Joystic est pressÃ©\n        */\n    //% block=\"bouton joystic est pressÃ©\"\n    export function joystic_is_pressed(): boolean {\n        pins.setPull(DigitalPin.P8, PinPullMode.PullUp)\n        if (pins.digitalReadPin(DigitalPin.P8) == 0)\n            return true;\n        else\n            return false;\n    }\n    /**\n     * Joystic\n     */\n    //% block=\"position de l'ax $ax du joystic\"\n    export function get_axis_value(ax :Gamepadaxis) : number {\n        let value = 0;\n        if (ax == Gamepadaxis.y)\n            value = pins.analogReadPin(AnalogReadWritePin.P1)\n        if (ax == Gamepadaxis.x)\n            value = pins.analogReadPin(AnalogReadWritePin.P2)\n        return (((value-512)*100)/512)*-1;\n    }\n\n    /**\n     * On button pressed\n     * @param btn Bouton de la manette\n     */\n    //% block=\"Lorsque $btn est pressÃ©\"\n    export function on_button_pressed(btn: GamepadButton, handler: () => void) {\n        control.inBackground(function() {\n            let prev = is_pressed(btn);\n            while (true) {\n                let val = is_pressed(btn);\n                if (val && !prev) {\n                    handler();\n                }\n                prev = val;\n                pause(20);\n            }\n        })\n    }\n\n    /**\n     * On joystic button pressed\n     */\n    //% block=\"Lorsque bouton joystic est pressÃ©\"\n    export function on_joystic_button_pressed(handler: () => void) {\n        control.inBackground(function () {\n            let prev = joystic_is_pressed();\n            while (true) {\n                let val = joystic_is_pressed();\n                if (val && !prev) {\n                    handler();\n                }\n                prev = val;\n                pause(20);\n            }\n        })\n    }\n}\n","pxt.json":"{\n    \"name\": \"manette joystic\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\",\n        \"manette_yahboom_joystic.ts\"\n    ],\n    \"preferredEditor\": \"blocksprj\"\n}\n"}}],"shares":[],"lastSaveTime":1760893946435}